/* Generated By:JavaCC: Do not edit this line. PA3.java */
public class PA3 implements PA3Constants {
    public static void main(String[] args) throws ParseException {
        PA3 parser = new PA3(System.in);
        parser.Program();
        System.out.println("Parse success!");
    }

  static final public void Program() throws ParseException {
    MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ClassDeclaration();
    }
    jj_consume_token(0);
  }

  static final public void MainClass() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFIER);
        System.out.println("class " + token.image + " {");
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    jj_consume_token(IDENTIFIER);
        System.out.println("    public static void main(String[] " + token.image + ") {");
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case STRING:
      case INT:
      case BOOLEAN:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      VarDeclaration();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case PRINTLN:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      Statement();
    }
    jj_consume_token(RBRACE);
        System.out.println("    }");
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      MethodDeclaration();
    }
    jj_consume_token(RBRACE);
        System.out.println("}");
  }

  static final public void ClassDeclaration() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFIER);
           System.out.println("class " + token.image + " {");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case STRING:
      case INT:
      case BOOLEAN:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      VarDeclaration();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      MethodDeclaration();
    }
    jj_consume_token(RBRACE);
        System.out.println("}");
  }

  static final public String VarDeclaration() throws ParseException {
 String type; String id;
    if (jj_2_1(2)) {
      type = Type();
      jj_consume_token(IDENTIFIER);
        id = token.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        Expression();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
        System.out.println("        " + type + " " + id + ";");
        {if (true) return type + " " + id + ";";}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case STRING:
      case INT:
      case BOOLEAN:
        type = Type();
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
        jj_consume_token(IDENTIFIER);
     id = token.image;
        jj_consume_token(SEMICOLON);
        System.out.println("        " + type + "[] " + id + ";");
        {if (true) return "        " + type + "[] " + id + ";";}
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void MethodDeclaration() throws ParseException {
 String type; String id;
    jj_consume_token(PUBLIC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    type = Type();
    jj_consume_token(IDENTIFIER);
     id = token.image;
    jj_consume_token(LPAREN);
     System.out.print("    public " + type + " " + id + "(");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
    case STRING:
    case INT:
    case BOOLEAN:
      type = Type();
      jj_consume_token(IDENTIFIER);
         System.out.print(type + " " + token.image);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        type = Type();
        jj_consume_token(IDENTIFIER);
             System.out.print(", " + type +  " " + token.image);
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
     System.out.println("){");
    statements();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
      returnStatement();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
        System.out.println("    }");
  }

  static final public void statements() throws ParseException {
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case VOID:
      case STRING:
      case INT:
      case BOOLEAN:
      case IF:
      case WHILE:
      case PRINTLN:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      if (jj_2_2(2)) {
        objectDeclearation();
      } else if (jj_2_3(2)) {
        Statement();
      } else if (jj_2_4(2)) {
        VarDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
          whileStatement();
          break;
        case IF:
          ifStatement();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void whileStatement() throws ParseException {
 String op;
    jj_consume_token(WHILE);
    op = operation();
    jj_consume_token(LBRACE);
                                         System.out.println("while (" + op + ") {");
    statements();
    jj_consume_token(RBRACE);
                                                                                                             System.out.println("}");
  }

  static final public void ifStatement() throws ParseException {
 String op;
    jj_consume_token(IF);
    op = operation();
    jj_consume_token(LBRACE);
                                      System.out.println("if (" + op + ") {");
    statements();
    jj_consume_token(RBRACE);
                                                                                                       System.out.println("}");
    jj_consume_token(ELSE);
    jj_consume_token(LBRACE);
                     System.out.println("else {");
    statements();
    jj_consume_token(RBRACE);
                                                                           System.out.println("}");
  }

  static final public String returnStatement() throws ParseException {
 String method;
    if (jj_2_5(2)) {
      jj_consume_token(RETURN);
      jj_consume_token(LPAREN);
      method = MethodCall();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
            System.out.println("        return(" + method + ");");
            {if (true) return "        return(" + method + ");";}
    } else if (jj_2_6(2)) {
      jj_consume_token(RETURN);
      Expression();
      jj_consume_token(SEMICOLON);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String objectDeclearation() throws ParseException {
 Token id1; Token id2;
    id1 = jj_consume_token(IDENTIFIER);
    id2 = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
    System.out.println("        " + id1.image + " " + id2.image + ";");
    {if (true) return id1.image + " " + id2.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
     {if (true) return "int";}
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
     {if (true) return "Boolean";}
      break;
    case STRING:
      jj_consume_token(STRING);
     {if (true) return "String";}
      break;
    case VOID:
      jj_consume_token(VOID);
     {if (true) return "void";}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
     {if (true) return "+";}
      break;
    case MINUS:
      jj_consume_token(MINUS);
     {if (true) return "-";}
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
     {if (true) return "*";}
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
     {if (true) return "/";}
      break;
    case EQUALS:
      jj_consume_token(EQUALS);
     {if (true) return "==";}
      break;
    case NOT_EQUALS:
      jj_consume_token(NOT_EQUALS);
     {if (true) return "!=";}
      break;
    case LESS_THAN:
      jj_consume_token(LESS_THAN);
     {if (true) return "<";}
      break;
    case LESS_THAN_OR_EQUAL:
      jj_consume_token(LESS_THAN_OR_EQUAL);
     {if (true) return "<=";}
      break;
    case GREATER_THAN:
      jj_consume_token(GREATER_THAN);
     {if (true) return ">";}
      break;
    case GREATER_THAN_OR_EQUAL:
      jj_consume_token(GREATER_THAN_OR_EQUAL);
     {if (true) return ">=";}
      break;
    case AND:
      jj_consume_token(AND);
     {if (true) return "&&";}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void PrintStatement() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

  static final public void PrintlnStatement() throws ParseException {
 String e; Token id;
    if (jj_2_7(4)) {
      jj_consume_token(PRINTLN);
      jj_consume_token(LPAREN);
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
              System.out.println("        System.out.println(" + id + ");");
    } else if (jj_2_8(4)) {
      jj_consume_token(PRINTLN);
      jj_consume_token(LPAREN);
      e = Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
        System.out.println("        System.out.println(" + e + ");");
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public String AssignStatement() throws ParseException {
 Token id1; Token id2; String objectInstantiation; String e; String e2;
    if (jj_2_9(5)) {
      id1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      id2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
        System.out.println("        " + id1.image + " = " + id2 + ";");
        {if (true) return id1.image + " = " + id2 + ";";}
    } else if (jj_2_10(5)) {
      id1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      e = MethodCall();
      jj_consume_token(SEMICOLON);
            System.out.println("        " + id1.image + " = " + e + ";");
            {if (true) return id1.image + " = " + e + ";";}
    } else if (jj_2_11(5)) {
      e2 = MethodCall();
      jj_consume_token(ASSIGN);
      e = operation();
      jj_consume_token(SEMICOLON);
        System.out.println("        " + e2 + " = " + e + ";");
        {if (true) return e2 + " = " + e + ";";}
    } else if (jj_2_12(5)) {
      id1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      objectInstantiation = ObjectInstantiation();
      jj_consume_token(SEMICOLON);
        System.out.println("        " + id1.image + " = " + objectInstantiation + ";");
        {if (true) return id1.image + " = " + token.image + ";";}
    } else if (jj_2_13(5)) {
      id1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      id2 = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(SEMICOLON);
        System.out.println("        " + id1.image + " = " + id2.image + ";");
        {if (true) return id1.image + " = " + token.image + ";";}
    } else if (jj_2_14(5)) {
      id1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      e = MethodCall();
      jj_consume_token(SEMICOLON);
            System.out.println("        " + id1.image + " = " + e + ";");
            {if (true) return id1.image + " = " + token.image + ";";}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINTLN:
      PrintlnStatement();
      break;
    case PRINT:
      PrintStatement();
      break;
    case INTEGER_LITERAL:
    case IDENTIFIER:
      AssignStatement();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public String Expression() throws ParseException {
 String instantiation; String methodCall;
    if (jj_2_15(2)) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      Expression();
      jj_consume_token(SEMICOLON);
    } else if (jj_2_16(2)) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(DOT);
      MethodCall();
    } else if (jj_2_17(2)) {
      jj_consume_token(LPAREN);
      instantiation = ObjectInstantiation();
      jj_consume_token(RPAREN);
      jj_consume_token(DOT);
      methodCall = MethodCall();
        {if (true) return "(" + instantiation + ")." + methodCall;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        ObjectInstantiation();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String ObjectInstantiation() throws ParseException {
 Token id; String type;
    if (jj_2_18(4)) {
      jj_consume_token(NEW);
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
        {if (true) return "new " + id.image + "()";}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        type = Type();
        jj_consume_token(LBRACKET);
        id = jj_consume_token(IDENTIFIER);
        jj_consume_token(RBRACKET);
        if (id != null) {
            {if (true) return "new " + type  + "[" + id.image + "]";}
        }
        {if (true) return "new " + type + "[]";}
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String MethodCall() throws ParseException {
  Token id; Token integer1; Token integer2; Token integer3; Token integer4; String operator; String operator2; String operator3; String result; String m; String m2; String m3; String m4;
    if (jj_2_19(4)) {
      integer1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(DOT);
      integer2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      jj_consume_token(IDENTIFIER);
                result = integer1.image + "." + integer2.image + "(" + token.image;
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
                result += ", " + token.image;
      }
      jj_consume_token(RPAREN);
        {if (true) return result + ")";}
    } else if (jj_2_20(4)) {
      integer1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(DOT);
      integer2 = jj_consume_token(IDENTIFIER);
        {if (true) return integer1.image + "." + integer2.image;}
    } else if (jj_2_21(4)) {
      integer1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACKET);
      integer2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(RBRACKET);
        {if (true) return integer1.image + "[" + integer2.image + "]";}
    } else if (jj_2_22(2)) {
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      integer1 = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(COMMA);
      integer2 = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(RPAREN);
        {if (true) return id + "(" + integer1 + ", " + integer2 + ")";}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        id = jj_consume_token(IDENTIFIER);
                        {if (true) return "" + id;}
        break;
      case INTEGER_LITERAL:
        id = jj_consume_token(INTEGER_LITERAL);
                             {if (true) return "" + id;}
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String operation() throws ParseException {
 String op; String result; Token id; Token integer;
     result = "";
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_10;
      }
      jj_consume_token(LPAREN);
         result += "(";
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
         result += token.image;
      break;
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
         result += token.image;
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    op = Operator();
         result += op;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RPAREN:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_11;
      }
      jj_consume_token(RPAREN);
             result += ")";
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
         result += token.image;
      break;
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
         result += token.image;
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_12:
    while (true) {
      if (jj_2_23(2)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(RPAREN);
         result += ")";
    }
    label_13:
    while (true) {
      if (jj_2_24(2)) {
        ;
      } else {
        break label_13;
      }
      op = Operator();
         result += op;
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_14;
        }
        jj_consume_token(LPAREN);
             result += "(";
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
                     result += token.image;
        break;
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
                     result += token.image;
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RPAREN:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_15;
        }
        jj_consume_token(RPAREN);
                     result += ")";
      }
    }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(PRINTLN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(PRINTLN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(GREATER_THAN_OR_EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(GREATER_THAN)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(LESS_THAN_OR_EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(NOT_EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    if (jj_3R_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PA3TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x18a00,0x700020,0x80,0x1000,0x18a00,0x80,0x0,0x18a00,0x100,0x1000000,0x18a00,0x2000,0x7b8a20,0xa0000,0x18a00,0x0,0x700020,0x4004000,0x4000,0x1000000,0x400020,0x4000000,0x400020,0x8000000,0x400020,0x4000000,0x400020,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[24];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PA3(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PA3(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PA3TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PA3(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PA3TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PA3(PA3TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PA3TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 24; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
