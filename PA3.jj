options {
    IGNORE_CASE = false;
}

PARSER_BEGIN(PA3)

public class PA3 {
    public static void main(String[] args) throws ParseException {
        PA3 parser = new PA3(System.in);
        parser.Program();
        System.out.println("Parse success!");
    }
}

PARSER_END(PA3)

SKIP : {
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN : {
    < INTEGER_LITERAL : (["0"-"9"])+ >
  | < CLASS : "class" >
  | < PUBLIC : "public" >
  | < STATIC : "static" >
  | < VOID : "void" >
  | < MAIN : "main" >
  | < STRING : "String" >
  | < EXTENDS : "extends" >
  | < RETURN : "return" >
  | < NEW : "new" >
  | < INT : "int" >
  | < BOOLEAN : "boolean" >
  | < IF : "if" >
  | < ELSE : "else" >
  | < WHILE : "while" >
  | < PRINTLN : "System.out.println" >
  | < PRINT : "System.out.print" >
  | < IDENTIFIER : (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* >
  | < SEMICOLON : ";" >
  | < COMMA : "," >
  | < DOT : "." >
  | < LPAREN : "(" >
  | < RPAREN : ")" >
  | < LBRACE : "{" >
  | < RBRACE : "}" >
  | < LBRACKET : "[" >
  | < RBRACKET : "]" >
  | < ASSIGN : "=" >
  | < PLUS : "+" >
  | < MINUS : "-" >
  | < MULTIPLY : "*" >
  | < DIVIDE : "/" >
  | < EQUALS : "==" >
  | < NOT_EQUALS : "!=" >
  | < LESS_THAN : "<" >
  | < LESS_THAN_OR_EQUAL : "<=" >
  | < GREATER_THAN : ">" >
  | < GREATER_THAN_OR_EQUAL : ">=" >
  | < AND : "&&" >
}

void Program() :
{}
{
    MainClass() ( ClassDeclaration() )*
    <EOF>
}

void MainClass() :
{}
{
    <CLASS> <IDENTIFIER>
    {
        System.out.println("class " + token.image + " {");
    }
    <LBRACE>
    <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LBRACKET> <RBRACKET> <IDENTIFIER>
    {
        System.out.println("    public static void main(String[] " + token.image + ") {");
    }
    <RPAREN> <LBRACE>
    ( VarDeclaration() )*
    ( Statement() )*
    <RBRACE>
    {
        System.out.println("    }");
    }
    ( MethodDeclaration() )*
    <RBRACE>
    {
        System.out.println("}");
    }
}

void ClassDeclaration() :
{}
{
    <CLASS> <IDENTIFIER>
       {
           System.out.println("class " + token.image + " {");
       }
    ( <EXTENDS> <IDENTIFIER> )? <LBRACE>
    ( VarDeclaration() )*
    ( MethodDeclaration() )*
    <RBRACE>
    {
        System.out.println("}");
    }
}

String VarDeclaration() :
{String type; String id;}
{
    LOOKAHEAD(2) type = Type() <IDENTIFIER>
    {
        id = token.image;
    }
    ( <ASSIGN> Expression() )? <SEMICOLON>
    {
        System.out.println("        " + type + " " + id + ";");
        return type + " " + id + ";";

    }

    | type = Type() <LBRACKET> <RBRACKET> <IDENTIFIER>
    {id = token.image;}
    <SEMICOLON>
    {
        System.out.println("        " + type + "[] " + id + ";");
        return "        " + type + "[] " + id + ";";
    }
}

void MethodDeclaration() :
{String type; String id;}
{
    <PUBLIC> (<STATIC>)? type = Type() <IDENTIFIER>
    {id = token.image;}
    <LPAREN>
    {System.out.print("    public " + type + " " + id + "(");}
    ( type = Type() <IDENTIFIER>
        {System.out.print(type + " " + token.image);}
        ( <COMMA> type = Type() <IDENTIFIER>
            {System.out.print(", " + type +  " " + token.image);}
            )*
        )? <RPAREN> <LBRACE>
    {System.out.println("){");}
    statements()
    ( returnStatement() )?
    <RBRACE>
    {
        System.out.println("    }");
    }
}

void statements() :
{}
{
    (
    LOOKAHEAD(2) objectDeclearation() |
    LOOKAHEAD(2) Statement() |
    LOOKAHEAD(2) VarDeclaration() |
    whileStatement() 
//    ifStatement()
    )*
}

void whileStatement() :
{String op;}
{
    <WHILE> <LPAREN> op = operation() <RPAREN> <LBRACE> {System.out.println("while (" + op + ") {");} statements() <RBRACE> {System.out.println("}");}
}

//void ifStatement() :
//{String m;}
//{
//    <IF> <LPAREN> m = Condition() <RPAREN> <LBRACE> {System.out.println("if (" + m + ") {");} statements() <RBRACE> {System.out.println("}");}
//    <ELSE> <LBRACE> {System.out.println("else {");} statements() <RBRACE> {System.out.println("}");}
//}

String returnStatement() :
{String method;}
{
    LOOKAHEAD(2) <RETURN> <LPAREN> method = MethodCall() <RPAREN> <SEMICOLON>
        {
            System.out.println("        return(" + method + ");");
            return "        return(" + method + ");";
        }
    |LOOKAHEAD(2) <RETURN> Expression() <SEMICOLON>
}

 String objectDeclearation():
{Token id1; Token id2;}
{
    id1 = <IDENTIFIER> id2 = <IDENTIFIER> <SEMICOLON>
    {
    System.out.println("        " + id1.image + " " + id2.image + ";");
    return id1.image + " " + id2.image;}
}

String Type() :
{}
{
    <INT>
    {return "int";}
    | <BOOLEAN>
    {return "Boolean";}
    | <STRING>
    {return "String";}
    | <VOID>
    {return "void";}
}

String Operator() :
{}
{
    <PLUS>
    {return "+";}
    | <MINUS>
    {return "-";}
    | <MULTIPLY>
    {return "*";}
    | <DIVIDE>
    {return "/";}
    | <EQUALS>
    {return "==";}
    | <NOT_EQUALS>
    {return "!=";}
    | <LESS_THAN>
    {return "<";}
    | <LESS_THAN_OR_EQUAL>
    {return "<=";}
    | <GREATER_THAN>
    {return ">";}
    | <GREATER_THAN_OR_EQUAL>
    {return ">=";}
    | <AND>
    {return "&&";}
}

void PrintStatement() :
{}
{
    <PRINT> <LPAREN> Expression() <RPAREN> <SEMICOLON>
}

void PrintlnStatement() :
{String e;}
{
    <PRINTLN> <LPAREN> e = Expression() <RPAREN> <SEMICOLON>
    {
        System.out.println("        System.out.println(" + e + ");");
    }
}

String AssignStatement() :
{Token id1; Token id2; String objectInstantiation; String e; String e2;}
{
    LOOKAHEAD(5) id1 = <IDENTIFIER> <ASSIGN> id2 = <IDENTIFIER> <SEMICOLON>
    {
        System.out.println("        " + id1.image + " = " + id2 + ";");
        return id1.image + " = " + id2 + ";";
    }
    | LOOKAHEAD(5) e2 = MethodCall() <ASSIGN> e = MethodCall() <SEMICOLON>
    {
        System.out.println("        " + e2 + " = " + e + ";");
        return e2 + " = " + e + ";";
    }
    | LOOKAHEAD(5) id1 = <IDENTIFIER> <ASSIGN> objectInstantiation = ObjectInstantiation() <SEMICOLON>
    {
        System.out.println("        " + id1.image + " = " + objectInstantiation + ";");
        return id1.image + " = " + token.image + ";";
    }
    | LOOKAHEAD(5) id1 = <IDENTIFIER> <ASSIGN> id2 = <INTEGER_LITERAL> <SEMICOLON>
    {
        System.out.println("        " + id1.image + " = " + id2.image + ";");
        return id1.image + " = " + token.image + ";";
    }
    | LOOKAHEAD(5) id1 = <IDENTIFIER> <ASSIGN> e = MethodCall() <SEMICOLON>
        {
            System.out.println("        " + id1.image + " = " + e + ";");
            return id1.image + " = " + token.image + ";";
        }
}

void Statement() :
{}
{
  PrintlnStatement()
  | PrintStatement()
  | AssignStatement()
}

String Expression() :
{String instantiation; String methodCall;}
{
    LOOKAHEAD(2) <IDENTIFIER> <ASSIGN> Expression() <SEMICOLON>
    |LOOKAHEAD(2) <IDENTIFIER> <DOT> MethodCall()
    |LOOKAHEAD(2) <LPAREN> instantiation = ObjectInstantiation() <RPAREN> <DOT> methodCall =  MethodCall()
    {
        return "(" + instantiation + ")." + methodCall;
    }
    |ObjectInstantiation()
    |<LPAREN> Expression() <RPAREN>
}

String ObjectInstantiation() :
{Token id; String type;}
{
    LOOKAHEAD(4) <NEW> id = <IDENTIFIER> <LPAREN> <RPAREN>
    {
        return "new " + id.image + "()";
    }
    | <NEW> type = Type() <LBRACKET> id = <IDENTIFIER> <RBRACKET>
    {
        if (id != null) {
            return "new " + type  + "[" + id.image + "]";
        }
        return "new " + type + "[]";
    }
}

String MethodCall() :
{ Token id; Token integer1; Token integer2; Token integer3; Token integer4; String operator; String operator2; String operator3; String result; String m; String m2; String m3; String m4;}
{
    LOOKAHEAD(4) integer1 = <IDENTIFIER> <DOT> integer2 = <IDENTIFIER> <LPAREN> <IDENTIFIER>
            {
                result = integer1.image + "." + integer2.image + "(" + token.image;
            }
        ( <COMMA> <IDENTIFIER>
            {
                result += ", " + token.image;
            }
        )*
     <RPAREN>
    {
        return result + ")";
    }
    |LOOKAHEAD(4) integer1 = <IDENTIFIER> <DOT> integer2 = <IDENTIFIER>
    {
        return integer1.image + "." + integer2.image;
    }
    |LOOKAHEAD(4) integer1 = <IDENTIFIER> <LBRACKET> integer2 = <IDENTIFIER> <RBRACKET>
    {
        return integer1.image + "[" + integer2.image + "]";
    }
    |LOOKAHEAD(2) id = <IDENTIFIER> <LPAREN> integer1 = <INTEGER_LITERAL> <COMMA> integer2 = <INTEGER_LITERAL> <RPAREN>
    {
        return id + "(" + integer1 + ", " + integer2 + ")";
    }
//    |LOOKAHEAD(4) <LPAREN> m = MethodCall() operator = Operator() m2 = MethodCall() <RPAREN>
//        {result = "(" + m + operator + m2 + ")";}
//    (operator2 = Operator() <LPAREN> m3 = MethodCall() operator3 = Operator() m4 = MethodCall() <RPAREN>
//        {result += operator2 + "(" + m3 + operator3 + m4 + ")";})*
//        {return result;}
//
    |id = <IDENTIFIER> {return "" + id;}
    |id = <INTEGER_LITERAL> {return "" + id;}
}

(j<n)&&(0<j)
String operation():
{String op; String result; Token id; Token integer;}
{
    {result = "";}
    (<LPAREN>
        {result += "(";})?
        ((<IDENTIFIER>
        {result += token.image;}) | (<INTEGER_LITERAL>
        {result += token.image;})) op = Operator()
        {result += op;}
        (<RPAREN>
            {result += ")";})?
        ((<IDENTIFIER>
        {result += token.image;}) | (<INTEGER_LITERAL>
        {result += token.image;}))
        (LOOKAHEAD(2)<RPAREN>
        {result += ")";})?
    (LOOKAHEAD(2)(operation()
    {result += op;} (<LPAREN>
                          {result += "(";})?
                          ((<IDENTIFIER>
                          {result += token.image;}) | (<INTEGER_LITERAL>
                          {result += token.image;})) op = Operator()
                          {result += op;}
                          (<RPAREN>
                              {result += ")";})?
                          ((<IDENTIFIER>
                          {result += token.image;}) | (<INTEGER_LITERAL>
                          {result += token.image;}))
                          (LOOKAHEAD(2)<RPAREN>
                          {result += ")";})?))*

              { return result;}
}